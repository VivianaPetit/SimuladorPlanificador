/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import DataStruct.LinkedList;
import Model.CPU;
import Model.PCB;
import Scheduler.RR;
import Scheduler.SRT;
import Scheduler.Scheduler;
import java.awt.BorderLayout;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javax.swing.Timer;

/**
 *
 * @author vivia
 */
public class SimuladorCPU extends javax.swing.JFrame {
    private PanelProcesos panelProcesos;
    private LinkedList<PCB> listaProcesos = new LinkedList<>();
    private CPU cpu;
    private Scheduler scheduler;

    public SimuladorCPU() {
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
        setTitle("Simulador de Planificación de Procesos");
        setSize(700, 500);
        setLayout(new BorderLayout());

        // Configurar el planificador que quieras usar
        scheduler = new RR(5); // puedes cambiar a SRT o HRRN, etc.

        // Crear CPU con el scheduler
        cpu = new CPU(scheduler);

        // Crear panel y añadirlo
        panelProcesos = new PanelProcesos(listaProcesos);
        add(panelProcesos, BorderLayout.CENTER);

        setVisible(true);
    }

    // Este método arranca toda la simulacion
    private void iniciarSimulacion() {
        // Crear procesos
        LinkedList<PCB> procesos = new LinkedList<>();
        procesos.insertFinal(new PCB(1, "A", 10, true, 5, 3, 10, 1, 0));
        procesos.insertFinal(new PCB(2, "B", 20, false, 3, 2, 10, 2, 6));
        procesos.insertFinal(new PCB(3, "C", 8, true, 7, 2, 10, 3, 8));

        // Iniciar hilos
        for (int i = 0; i < procesos.getLenght(); i++) {
            PCB p = procesos.getElementIn(i);
            cpu.addProcessQueue(p);
        }

        // Hilo CPU (simulación)
        Thread cpuThread = new Thread(() -> {
            if (scheduler instanceof RR || scheduler instanceof SRT)
                cpu.ejecutar();       // modo expulsivo
            else
                cpu.ejecutarSecuencial(); // modo no expulsivo
        });
        cpuThread.start();

        // Hilo que actualiza el panel con los procesos actuales
        new Thread(() -> {
            while (true) {
                LinkedList<PCB> lista = cpu.obtenerProcesosTotales();
                panelProcesos.actualizarProcesos(lista);
                try {
                    Thread.sleep(1);
                } catch (InterruptedException e) {
                    break;
                }
            }
        }).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inicarButton = new javax.swing.JButton();
        panelRound1 = new GUI.PanelRound();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        inicarButton.setText("Iniciar Simulacion");
        inicarButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                inicarButtonMousePressed(evt);
            }
        });
        inicarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inicarButtonActionPerformed(evt);
            }
        });

        panelRound1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(panelRound1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(357, Short.MAX_VALUE)
                .addComponent(inicarButton)
                .addGap(118, 118, 118))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(panelRound1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 236, Short.MAX_VALUE)
                .addComponent(inicarButton)
                .addGap(105, 105, 105))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inicarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inicarButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inicarButtonActionPerformed

    private void inicarButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inicarButtonMousePressed
        iniciarSimulacion();
    }//GEN-LAST:event_inicarButtonMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // Lanzar GUI
        SwingUtilities.invokeLater(() -> new SimuladorCPU().setVisible(true));

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton inicarButton;
    private GUI.PanelRound panelRound1;
    // End of variables declaration//GEN-END:variables
}
